name: Release

on:
  push:
    tags:
      - 'v*' # e.g. v1.0.0

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Cache node_modules
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5Ô∏è‚É£ Build app
      - name: Build app
        run: npm run build

      # üçè macOS build step (ONLY x64 ‚Üí works on Intel + ARM Rosetta)
      - name: Build & Publish macOS (x64 only)
        if: matrix.os == 'macos-latest'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "üçè Building macOS Intel (x64) ‚Üí works on both Intel & ARM via Rosetta"
          npx electron-builder --mac dmg zip --x64 --publish always

      # ü™ü Windows build step
      - name: Build & Publish Windows
        if: matrix.os == 'windows-latest'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "ü™ü Building Windows (NSIS installer)"
          npx electron-builder --win nsis --publish always

      # üêß Linux build step (optional)
      - name: Build & Publish Linux
        if: matrix.os == 'ubuntu-latest'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "üêß Building Linux (AppImage)"
          npx electron-builder --linux AppImage --publish always
