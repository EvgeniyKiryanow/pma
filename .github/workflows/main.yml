name: Release

on:
  push:
    tags:
      - 'v*' # e.g. v1.0.0

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 3Ô∏è‚É£ Cache node_modules for faster builds
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm ci

      # 5Ô∏è‚É£ Build app (frontend if needed)
      - name: Build app
        run: npm run build

      # 6Ô∏è‚É£ Build & Publish for each OS
      - name: Build & Publish Electron Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "Running on $RUNNER_OS"
          
          if [ "${{ runner.os }}" = "macOS" ]; then
            # üçè macOS ‚Üí build dmg + zip for updates
            npx electron-builder --mac dmg zip --x64 --arm64 --publish always
          elif [ "${{ runner.os }}" = "Windows" ]; then
            # ü™ü Windows ‚Üí build NSIS installer
            npx electron-builder --win nsis --publish always
          elif [ "${{ runner.os }}" = "Linux" ]; then
            # üêß Linux ‚Üí optional AppImage
            npx electron-builder --linux AppImage --publish always
          fi
