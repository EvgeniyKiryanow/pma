import { useEffect, useMemo, useState } from 'react';
import { useShtatniStore, ShtatnaPosada } from '../../../stores/useShtatniStore';
import { useUserStore } from '../../../stores/userStore';
import classifyStatusForReport from '../../../helpers/classifyStatusForReport';

export function StaffReportTable() {
    const { shtatniPosady, fetchAll, updatePosada } = useShtatniStore();
    const { users, fetchUsers } = useUserStore();

    const [editingData, setEditingData] = useState<Record<string, any>>({});
    const [searchTerm, setSearchTerm] = useState('');

    useEffect(() => {
        if (shtatniPosady.length === 0) fetchAll();
        if (users.length === 0) fetchUsers();
    }, []);

    // ‚úÖ Sort by shtat_number numeric
    const sorted = useMemo(() => {
        return [...shtatniPosady].sort((a, b) => {
            const nA = parseInt(a.shtat_number.replace(/\D/g, ''), 10) || 0;
            const nB = parseInt(b.shtat_number.replace(/\D/g, ''), 10) || 0;
            return nA - nB;
        });
    }, [shtatniPosady]);

    // ‚úÖ Merge with users & extra_data
    const allRows = useMemo(() => {
        return sorted.map((pos) => {
            const assignedUser = users.find(
                (u) => u.position === pos.position_name && u.unitMain === pos.unit_name,
            );

            const extra = pos.extra_data || {};
            const soldierStatus = assignedUser?.soldierStatus;

            // ‚úÖ Classify soldierStatus ‚Üí either in-area OR absenceReason
            const classified = classifyStatusForReport(soldierStatus);

            return {
                shtatNumber: pos.shtat_number,
                unit: pos.unit_name || '',
                position: pos.position_name || '',
                fullName: assignedUser?.fullName || '',
                rank: assignedUser?.rank || '',
                taxId: assignedUser?.taxId || '',

                // ‚úÖ Prefer DB extra_data ‚Üí fallback to soldierStatus auto classification
                statusInArea: extra.statusInArea || classified.statusInArea,
                distanceFromLVZ: extra.distanceFromLVZ || '',
                absenceReason: extra.absenceReason || classified.absenceReason,
                dateFrom: extra.dateFrom || '',
                dateTo: extra.dateTo || '',
                statusNote: extra.statusNote || '',
            };
        });
    }, [sorted, users]);

    // ‚úÖ Filter by search
    const reportRows = useMemo(() => {
        if (!searchTerm.trim()) return allRows;
        const lower = searchTerm.toLowerCase();

        return allRows.filter((row) =>
            Object.values(row).some((val) => String(val).toLowerCase().includes(lower)),
        );
    }, [allRows, searchTerm]);

    // ‚úÖ Handle edits
    const handleEditChange = (shtatNumber: string, field: string, value: string) => {
        setEditingData((prev) => ({
            ...prev,
            [shtatNumber]: {
                ...prev[shtatNumber],
                [field]: value,
            },
        }));
    };

    // ‚úÖ Persist to DB
    const saveRowChanges = async (shtatNumber: string) => {
        const changes = editingData[shtatNumber];
        if (!changes) return;

        const posada = shtatniPosady.find((p) => p.shtat_number === shtatNumber);
        if (!posada) return;

        const mergedExtra = {
            ...(posada.extra_data || {}),
            ...changes,
        };

        const updatedPosada: ShtatnaPosada = {
            ...posada,
            extra_data: mergedExtra,
        };

        const ok = await updatePosada(updatedPosada);
        if (ok) {
            setEditingData((prev) => {
                const copy = { ...prev };
                delete copy[shtatNumber];
                return copy;
            });
        }
    };

    return (
        <div className="flex flex-col space-y-6">
            {/* ‚úÖ Page Header */}
            <div className="flex flex-col gap-3">
                <h1 className="text-2xl font-bold text-gray-800">üìä –ó–≤—ñ—Ç –ø–æ –æ—Å–æ–±–æ–≤–æ–º—É —Å–∫–ª–∞–¥—É</h1>
                <p className="text-gray-600 text-sm max-w-4xl leading-relaxed">
                    –¢—É—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ <b>—É—Å—ñ —à—Ç–∞—Ç–Ω—ñ –ø–æ—Å–∞–¥–∏</b> —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –Ω–∞ –Ω–∏—Ö
                    –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤. –í–∏ –º–æ–∂–µ—Ç–µ <b>—à—É–∫–∞—Ç–∏</b> –ø–æ –±—É–¥—å-—è–∫–æ–º—É –ø–æ–ª—é —Ç–∞{' '}
                    <b>—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ</b> –ø—Ä—è–º–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ: —Å—Ç–∞—Ç—É—Å —É —Ä–∞–π–æ–Ω—ñ, –≤—ñ–¥—Å—Ç–∞–Ω—å, –ø—Ä–∏—á–∏–Ω—É
                    –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ, –¥–∞—Ç–∏ —Ç–∞ –ø—Ä–∏–º—ñ—Ç–∫–∏.
                </p>

                {/* ‚úÖ Search bar */}
                <div className="flex items-center gap-3">
                    <input
                        type="text"
                        placeholder="üîç –ü–æ—à—É–∫ –ø–æ –±—É–¥—å-—è–∫–æ–º—É –ø–æ–ª—é..."
                        className="w-96 px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-300"
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                    {searchTerm && (
                        <button
                            onClick={() => setSearchTerm('')}
                            className="px-3 py-2 text-sm bg-gray-200 rounded hover:bg-gray-300"
                        >
                            ‚ùå –û—á–∏—Å—Ç–∏—Ç–∏
                        </button>
                    )}
                </div>
            </div>

            {/* ‚úÖ Table container */}
            <div className="overflow-x-auto border rounded-lg shadow bg-white">
                <table className="min-w-[1600px] text-sm border-collapse">
                    <thead>
                        <tr className="bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800">
                            <th className="border px-4 py-3">‚Ññ –ø–æ—Å–∞–¥–∏</th>
                            <th className="border px-4 py-3">–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª</th>
                            <th className="border px-4 py-3">–ü–æ—Å–∞–¥–∞</th>
                            <th className="border px-4 py-3">–í/–∑–≤–∞–Ω–Ω—è</th>
                            <th className="border px-4 py-3">–ü–Ü–ë</th>
                            <th className="border px-4 py-3">–Ü–ü–ù</th>
                            <th className="border px-4 py-3 w-[250px]">–°—Ç–∞—Ç—É—Å —É —Ä–∞–π–æ–Ω—ñ</th>
                            <th className="border px-4 py-3 w-[180px]">–í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ –õ–í–ó</th>
                            <th className="border px-4 py-3 w-[250px]">–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ</th>
                            <th className="border px-4 py-3 w-[200px]">–î–∞—Ç–∞ –∑</th>
                            <th className="border px-4 py-3 w-[200px]">–î–∞—Ç–∞ –ø–æ</th>
                            <th className="border px-4 py-3 w-[280px]">–ü–æ–º—ñ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å—É</th>
                        </tr>
                    </thead>
                    <tbody>
                        {reportRows.map((row, idx) => {
                            const edit = editingData[row.shtatNumber] || {};
                            const isEven = idx % 2 === 0;

                            return (
                                <tr
                                    key={row.shtatNumber}
                                    className={`${isEven ? 'bg-white' : 'bg-gray-50'} hover:bg-blue-50 transition`}
                                >
                                    {/* Static columns */}
                                    <td className="border px-4 py-3 font-medium">
                                        {row.shtatNumber}
                                    </td>
                                    <td className="border px-4 py-3">{row.unit}</td>
                                    <td className="border px-4 py-3">{row.position}</td>
                                    <td className="border px-4 py-3">{row.rank}</td>
                                    <td className="border px-4 py-3">{row.fullName}</td>
                                    <td className="border px-4 py-3">{row.taxId}</td>

                                    {/* Editable: –°—Ç–∞—Ç—É—Å —É —Ä–∞–π–æ–Ω—ñ */}
                                    <td className="border px-4 py-3">
                                        <input
                                            type="text"
                                            className="w-full rounded-md border-gray-300 focus:border-blue-400 focus:ring focus:ring-blue-100 px-2 py-1"
                                            value={edit.statusInArea ?? row.statusInArea}
                                            onChange={(e) =>
                                                handleEditChange(
                                                    row.shtatNumber,
                                                    'statusInArea',
                                                    e.target.value,
                                                )
                                            }
                                            onBlur={() => saveRowChanges(row.shtatNumber)}
                                        />
                                    </td>

                                    {/* Editable: –í—ñ–¥—Å—Ç–∞–Ω—å */}
                                    <td className="border px-4 py-3">
                                        <input
                                            type="text"
                                            className="w-full rounded-md border-gray-300 focus:border-blue-400 focus:ring focus:ring-blue-100 px-2 py-1"
                                            value={edit.distanceFromLVZ ?? row.distanceFromLVZ}
                                            onChange={(e) =>
                                                handleEditChange(
                                                    row.shtatNumber,
                                                    'distanceFromLVZ',
                                                    e.target.value,
                                                )
                                            }
                                            onBlur={() => saveRowChanges(row.shtatNumber)}
                                        />
                                    </td>

                                    {/* Editable: –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ */}
                                    <td className="border px-4 py-3">
                                        <input
                                            type="text"
                                            className="w-full rounded-md border-gray-300 focus:border-blue-400 focus:ring focus:ring-blue-100 px-2 py-1"
                                            value={edit.absenceReason ?? row.absenceReason}
                                            onChange={(e) =>
                                                handleEditChange(
                                                    row.shtatNumber,
                                                    'absenceReason',
                                                    e.target.value,
                                                )
                                            }
                                            onBlur={() => saveRowChanges(row.shtatNumber)}
                                        />
                                    </td>

                                    {/* Editable: –î–∞—Ç–∞ –∑ */}
                                    <td className="border px-4 py-3">
                                        <input
                                            type="text"
                                            placeholder="–¥–∞—Ç–∞ –∑..."
                                            className="w-full rounded-md border-gray-300 focus:border-blue-400 focus:ring focus:ring-blue-100 px-2 py-1"
                                            value={edit.dateFrom ?? row.dateFrom}
                                            onChange={(e) =>
                                                handleEditChange(
                                                    row.shtatNumber,
                                                    'dateFrom',
                                                    e.target.value,
                                                )
                                            }
                                            onBlur={() => saveRowChanges(row.shtatNumber)}
                                        />
                                    </td>

                                    {/* Editable: –î–∞—Ç–∞ –ø–æ */}
                                    <td className="border px-4 py-3">
                                        <input
                                            type="text"
                                            placeholder="–¥–∞—Ç–∞ –ø–æ..."
                                            className="w-full rounded-md border-gray-300 focus:border-blue-400 focus:ring focus:ring-blue-100 px-2 py-1"
                                            value={edit.dateTo ?? row.dateTo}
                                            onChange={(e) =>
                                                handleEditChange(
                                                    row.shtatNumber,
                                                    'dateTo',
                                                    e.target.value,
                                                )
                                            }
                                            onBlur={() => saveRowChanges(row.shtatNumber)}
                                        />
                                    </td>

                                    {/* Editable: –ü–æ–º—ñ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å—É */}
                                    <td className="border px-4 py-3">
                                        <input
                                            type="text"
                                            placeholder="–¥–æ–¥–∞—Ç–∏ –ø–æ–º—ñ—Ç–∫—É..."
                                            className="w-full rounded-md border-gray-300 focus:border-blue-400 focus:ring focus:ring-blue-100 px-2 py-1"
                                            value={edit.statusNote ?? row.statusNote}
                                            onChange={(e) =>
                                                handleEditChange(
                                                    row.shtatNumber,
                                                    'statusNote',
                                                    e.target.value,
                                                )
                                            }
                                            onBlur={() => saveRowChanges(row.shtatNumber)}
                                        />
                                    </td>
                                </tr>
                            );
                        })}

                        {reportRows.length === 0 && (
                            <tr>
                                <td colSpan={12} className="p-8 text-center text-gray-500 italic">
                                    ‚è≥ –î–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∞–±–æ –ø–æ—à—É–∫ –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∑–±—ñ–≥—ñ–≤
                                </td>
                            </tr>
                        )}
                    </tbody>
                </table>
            </div>
        </div>
    );
}
