import { useState } from 'react';
import BackupControls from '../components/BackupControls';
import { useI18nStore } from '../stores/i18nStore';

export default function BackupPanel() {
    const [activeTab, setActiveTab] = useState<'settings' | 'actions' | 'changeLogs'>('actions');
    const [showPasswordModalType, setShowPasswordModalType] = useState<
        null | 'export' | 'import' | 'export-db' | 'import-db'
    >(null);
    const [passwordInput, setPasswordInput] = useState('');

    const { t } = useI18nStore();
    const password = passwordInput.trim();
    const handlePasswordConfirm = async () => {
        if (password.length < 6) {
            alert('–ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤.');
            return;
        }

        const type = showPasswordModalType;
        setShowPasswordModalType(null);
        setPasswordInput('');

        try {
            if (type === 'export') {
                await window.electronAPI.exportChangeLogs(password);
                alert(t('backupPanel.exportSuccess'));
            } else if (type === 'import') {
                const result = await window.electronAPI.importChangeLogs(password);
                if (result?.error === 'invalid-password') {
                    alert('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
                    setShowPasswordModalType('import');
                    return;
                }
                alert(t('backupPanel.importSuccess'));
            } else if (type === 'export-db') {
                const success = await window.electronAPI.downloadDbSafe(password);
                alert(success ? '–ë–µ–∫–∞–ø —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±–µ–∫–∞–ø—É');
            } else if (type === 'import-db') {
                const success = await window.electronAPI.restoreDbSafe(password);
                alert(success ? '–ë–µ–∫–∞–ø —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ' : '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –±–µ–∫–∞–ø—É');
                if (success) window.location.reload();
            }
        } catch {
            alert('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        }
    };

    return (
        <div className="flex h-full">
            {/* Sidebar */}
            <div className="w-48 bg-gray-100 border-r p-4 space-y-2">
                <h2 className="text-lg font-semibold text-gray-800 mb-4">
                    {t('backupPanel.title')}
                </h2>
                <button
                    onClick={() => setActiveTab('actions')}
                    className={`w-full text-left px-3 py-2 rounded hover:bg-gray-200 ${
                        activeTab === 'actions' ? 'bg-gray-200 font-medium' : ''
                    }`}
                >
                    {t('backupPanel.actions')}
                </button>
                <button
                    onClick={() => setActiveTab('settings')}
                    className={`w-full text-left px-3 py-2 rounded hover:bg-gray-200 ${
                        activeTab === 'settings' ? 'bg-gray-200 font-medium' : ''
                    }`}
                >
                    {t('backupPanel.settings')}
                </button>
                <button
                    onClick={() => setActiveTab('changeLogs')}
                    className={`w-full text-left px-3 py-2 rounded hover:bg-gray-200 ${
                        activeTab === 'changeLogs' ? 'bg-gray-200 font-medium' : ''
                    }`}
                >
                    {t('backupPanel.changeLogs')}
                </button>
            </div>

            {/* Main Content */}
            <div className="flex-1 p-8 overflow-y-auto">
                {activeTab === 'actions' && (
                    <div className="max-w-xl mx-auto space-y-8">
                        <div className="bg-white p-6 rounded-xl shadow border border-gray-200">
                            <h2 className="text-3xl font-bold text-gray-900 mb-2 flex items-center gap-2">
                                üíæ {t('backupPanel.actions')}
                            </h2>
                            <p className="text-gray-700 text-sm leading-relaxed">
                                –°—Ç–≤–æ—Ä—é–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –≤—Ä—É—á–Ω—É –∞–±–æ –≤—ñ–¥–Ω–æ–≤–ª—é–π—Ç–µ –¥–∞–Ω—ñ –ø—Ä–∏
                                –ø–æ—Ç—Ä–µ–±—ñ. –î–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –±–µ–∑–ø–µ–∫–∏ —Ç–∞–∫–æ–∂ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è{' '}
                                <strong>–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è</strong>, —â–æ –¥–æ–∑–≤–æ–ª—è—î
                                –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏ –¥–∞–Ω—ñ –ø–∞—Ä–æ–ª–µ–º.
                            </p>
                        </div>

                        <div className="space-y-6">
                            <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100">
                                <h3 className="text-lg font-semibold text-gray-800 mb-2">
                                    üü¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è
                                </h3>
                                <p className="text-sm text-gray-600 mb-4">
                                    –¶—ñ –¥—ñ—ó –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–±–æ –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö –±–µ–∑
                                    —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è. –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–±–æ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö
                                    –∫–æ–ø—ñ–π.
                                </p>
                                <div className="flex justify-center gap-4">
                                    <button
                                        onClick={async () => {
                                            const success = await window.electronAPI.downloadDb();
                                            alert(
                                                success
                                                    ? t('backupPanel.backupSuccess')
                                                    : t('backupPanel.backupFail'),
                                            );
                                        }}
                                        className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg shadow"
                                    >
                                        üì• {t('backupPanel.download')}
                                    </button>
                                    <button
                                        onClick={async () => {
                                            const success = await window.electronAPI.restoreDb();
                                            alert(
                                                success
                                                    ? t('backupPanel.restoreSuccess')
                                                    : t('backupPanel.restoreFail'),
                                            );
                                            if (success) window.location.reload();
                                        }}
                                        className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg shadow"
                                    >
                                        ‚ôªÔ∏è {t('backupPanel.restore')}
                                    </button>
                                </div>
                            </div>

                            <div className="bg-white p-5 rounded-lg shadow-sm border border-gray-100">
                                <h3 className="text-lg font-semibold text-gray-800 mb-2">
                                    üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
                                </h3>
                                <p className="text-sm text-gray-600 mb-4">
                                    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É —á—É—Ç–ª–∏–≤–∏—Ö
                                    –¥–∞–Ω–∏—Ö. –í–∏ –≤–∫–∞–∑—É—î—Ç–µ –ø–∞—Ä–æ–ª—å, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –Ω–∞ —ñ–Ω—à–æ–º—É
                                    –ø—Ä–∏—Å—Ç—Ä–æ—ó.
                                </p>
                                <div className="flex justify-center gap-4">
                                    <button
                                        onClick={() => setShowPasswordModalType('export-db')}
                                        className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg shadow"
                                    >
                                        üîê –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
                                    </button>
                                    <button
                                        onClick={() => setShowPasswordModalType('import-db')}
                                        className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg shadow"
                                    >
                                        üîë –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {activeTab === 'settings' && (
                    <div className="max-w-xl mx-auto">
                        <h2 className="text-2xl font-bold text-gray-800 mb-4">
                            {t('backupPanel.settings')}
                        </h2>
                        <BackupControls />
                    </div>
                )}

                {activeTab === 'changeLogs' && (
                    <div className="max-w-xl mx-auto space-y-6">
                        <div className="mb-6">
                            <h2 className="text-3xl font-bold text-gray-900 mb-2">
                                {t('backupPanel.changeLogs')}
                            </h2>
                            <p className="text-gray-700 text-sm leading-relaxed">
                                –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ <strong>–µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏</strong> –∞–±–æ{' '}
                                <strong>—ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏</strong> –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ –∂—É—Ä–Ω–∞–ª–∏ –∑–º—ñ–Ω...
                            </p>
                        </div>

                        <div className="flex justify-center gap-4">
                            <button
                                onClick={() => setShowPasswordModalType('export')}
                                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded shadow"
                            >
                                {t('backupPanel.exportChangeLogs')}
                            </button>

                            <button
                                onClick={() => setShowPasswordModalType('import')}
                                className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded shadow"
                            >
                                {t('backupPanel.importChangeLogs')}
                            </button>
                        </div>
                    </div>
                )}

                {showPasswordModalType && (
                    <div className="fixed inset-0 z-50 bg-white bg-opacity-50 backdrop-blur-sm flex items-center justify-center">
                        <div className="bg-white rounded-2xl shadow-xl w-full max-w-md p-6 animate-fade-in">
                            <h2 className="text-xl font-semibold text-gray-800 mb-4 text-center">
                                {showPasswordModalType.includes('export')
                                    ? '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è'
                                    : '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è'}
                            </h2>

                            <input
                                type="password"
                                value={passwordInput}
                                onChange={(e) => setPasswordInput(e.target.value)}
                                className="w-full border border-gray-300 rounded-lg px-4 py-2 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
                                placeholder="–ü–∞—Ä–æ–ª—å (–º—ñ–Ω. 6 —Å–∏–º–≤–æ–ª—ñ–≤)"
                                autoFocus
                            />

                            <div className="flex justify-end gap-3">
                                <button
                                    onClick={() => {
                                        setShowPasswordModalType(null);
                                        setPasswordInput('');
                                    }}
                                    className="px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300 text-gray-700"
                                >
                                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                                </button>
                                <button
                                    onClick={handlePasswordConfirm}
                                    className="px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white font-medium"
                                >
                                    OK
                                </button>
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}
